// Code generated by BobGen psql v0.27.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	models "github.com/efectn/go-orm-benchmarks/bench/bob/models"
	"github.com/jaswdr/faker/v2"
)

type Model5Mod interface {
	Apply(*Model5Template)
}

type Model5ModFunc func(*Model5Template)

func (f Model5ModFunc) Apply(n *Model5Template) {
	f(n)
}

type Model5ModSlice []Model5Mod

func (mods Model5ModSlice) Apply(n *Model5Template) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// Model5Template is an object representing the database table.
// all columns are optional and should be set by mods
type Model5Template struct {
	ID      func() int32
	Name    func() string
	Title   func() string
	Fax     func() string
	Web     func() string
	Age     func() int32
	Right   func() bool
	Counter func() int64

	f *Factory
}

// Apply mods to the Model5Template
func (o *Model5Template) Apply(mods ...Model5Mod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Model5
// this does nothing with the relationship templates
func (o Model5Template) toModel() *models.Model5 {
	m := &models.Model5{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Title != nil {
		m.Title = o.Title()
	}
	if o.Fax != nil {
		m.Fax = o.Fax()
	}
	if o.Web != nil {
		m.Web = o.Web()
	}
	if o.Age != nil {
		m.Age = o.Age()
	}
	if o.Right != nil {
		m.Right = o.Right()
	}
	if o.Counter != nil {
		m.Counter = o.Counter()
	}

	return m
}

// toModels returns an models.Model5Slice
// this does nothing with the relationship templates
func (o Model5Template) toModels(number int) models.Model5Slice {
	m := make(models.Model5Slice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Model5
// according to the relationships in the template. Nothing is inserted into the db
func (t Model5Template) setModelRels(o *models.Model5) {}

// Build returns an *models.Model5
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use Model5Template.Create
func (o Model5Template) Build() *models.Model5 {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.Model5Slice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use Model5Template.CreateMany
func (o Model5Template) BuildMany(number int) models.Model5Slice {
	m := make(models.Model5Slice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// Model5 has methods that act as mods for the Model5Template
var Model5Mods model5Mods

type model5Mods struct{}

func (m model5Mods) RandomizeAllColumns(f *faker.Faker) Model5Mod {
	return Model5ModSlice{
		Model5Mods.RandomID(f),
		Model5Mods.RandomName(f),
		Model5Mods.RandomTitle(f),
		Model5Mods.RandomFax(f),
		Model5Mods.RandomWeb(f),
		Model5Mods.RandomAge(f),
		Model5Mods.RandomRight(f),
		Model5Mods.RandomCounter(f),
	}
}

// Set the model columns to this value
func (m model5Mods) ID(val int32) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m model5Mods) IDFunc(f func() int32) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.ID = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetID() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomID(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

func (m model5Mods) ensureID(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.ID != nil {
			return
		}

		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m model5Mods) Name(val string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m model5Mods) NameFunc(f func() string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Name = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetName() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomName(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m model5Mods) ensureName(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m model5Mods) Title(val string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Title = func() string { return val }
	})
}

// Set the Column from the function
func (m model5Mods) TitleFunc(f func() string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Title = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetTitle() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Title = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomTitle(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Title = func() string {
			return random[string](f)
		}
	})
}

func (m model5Mods) ensureTitle(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.Title != nil {
			return
		}

		o.Title = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m model5Mods) Fax(val string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Fax = func() string { return val }
	})
}

// Set the Column from the function
func (m model5Mods) FaxFunc(f func() string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Fax = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetFax() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Fax = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomFax(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Fax = func() string {
			return random[string](f)
		}
	})
}

func (m model5Mods) ensureFax(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.Fax != nil {
			return
		}

		o.Fax = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m model5Mods) Web(val string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Web = func() string { return val }
	})
}

// Set the Column from the function
func (m model5Mods) WebFunc(f func() string) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Web = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetWeb() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Web = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomWeb(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Web = func() string {
			return random[string](f)
		}
	})
}

func (m model5Mods) ensureWeb(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.Web != nil {
			return
		}

		o.Web = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m model5Mods) Age(val int32) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Age = func() int32 { return val }
	})
}

// Set the Column from the function
func (m model5Mods) AgeFunc(f func() int32) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Age = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetAge() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Age = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomAge(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Age = func() int32 {
			return random[int32](f)
		}
	})
}

func (m model5Mods) ensureAge(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.Age != nil {
			return
		}

		o.Age = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m model5Mods) Right(val bool) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Right = func() bool { return val }
	})
}

// Set the Column from the function
func (m model5Mods) RightFunc(f func() bool) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Right = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetRight() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Right = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomRight(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Right = func() bool {
			return random[bool](f)
		}
	})
}

func (m model5Mods) ensureRight(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.Right != nil {
			return
		}

		o.Right = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m model5Mods) Counter(val int64) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Counter = func() int64 { return val }
	})
}

// Set the Column from the function
func (m model5Mods) CounterFunc(f func() int64) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Counter = f
	})
}

// Clear any values for the column
func (m model5Mods) UnsetCounter() Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Counter = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m model5Mods) RandomCounter(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		o.Counter = func() int64 {
			return random[int64](f)
		}
	})
}

func (m model5Mods) ensureCounter(f *faker.Faker) Model5Mod {
	return Model5ModFunc(func(o *Model5Template) {
		if o.Counter != nil {
			return
		}

		o.Counter = func() int64 {
			return random[int64](f)
		}
	})
}
