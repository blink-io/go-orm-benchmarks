// Code generated by BobGen psql v0.27.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	"github.com/aarondl/opt/omit"
	models "github.com/efectn/go-orm-benchmarks/bench/bob/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type ModelMod interface {
	Apply(*ModelTemplate)
}

type ModelModFunc func(*ModelTemplate)

func (f ModelModFunc) Apply(n *ModelTemplate) {
	f(n)
}

type ModelModSlice []ModelMod

func (mods ModelModSlice) Apply(n *ModelTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// ModelTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ModelTemplate struct {
	ID      func() int32
	Name    func() string
	Title   func() string
	Fax     func() string
	Web     func() string
	Age     func() int32
	Right   func() bool
	Counter func() int64

	f *Factory
}

// Apply mods to the ModelTemplate
func (o *ModelTemplate) Apply(mods ...ModelMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Model
// this does nothing with the relationship templates
func (o ModelTemplate) toModel() *models.Model {
	m := &models.Model{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Title != nil {
		m.Title = o.Title()
	}
	if o.Fax != nil {
		m.Fax = o.Fax()
	}
	if o.Web != nil {
		m.Web = o.Web()
	}
	if o.Age != nil {
		m.Age = o.Age()
	}
	if o.Right != nil {
		m.Right = o.Right()
	}
	if o.Counter != nil {
		m.Counter = o.Counter()
	}

	return m
}

// toModels returns an models.ModelSlice
// this does nothing with the relationship templates
func (o ModelTemplate) toModels(number int) models.ModelSlice {
	m := make(models.ModelSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Model
// according to the relationships in the template. Nothing is inserted into the db
func (t ModelTemplate) setModelRels(o *models.Model) {}

// BuildSetter returns an *models.ModelSetter
// this does nothing with the relationship templates
func (o ModelTemplate) BuildSetter() *models.ModelSetter {
	m := &models.ModelSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Title != nil {
		m.Title = omit.From(o.Title())
	}
	if o.Fax != nil {
		m.Fax = omit.From(o.Fax())
	}
	if o.Web != nil {
		m.Web = omit.From(o.Web())
	}
	if o.Age != nil {
		m.Age = omit.From(o.Age())
	}
	if o.Right != nil {
		m.Right = omit.From(o.Right())
	}
	if o.Counter != nil {
		m.Counter = omit.From(o.Counter())
	}

	return m
}

// BuildManySetter returns an []*models.ModelSetter
// this does nothing with the relationship templates
func (o ModelTemplate) BuildManySetter(number int) []*models.ModelSetter {
	m := make([]*models.ModelSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Model
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ModelTemplate.Create
func (o ModelTemplate) Build() *models.Model {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ModelSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ModelTemplate.CreateMany
func (o ModelTemplate) BuildMany(number int) models.ModelSlice {
	m := make(models.ModelSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableModel(m *models.ModelSetter) {
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.Title.IsUnset() {
		m.Title = omit.From(random[string](nil))
	}
	if m.Fax.IsUnset() {
		m.Fax = omit.From(random[string](nil))
	}
	if m.Web.IsUnset() {
		m.Web = omit.From(random[string](nil))
	}
	if m.Age.IsUnset() {
		m.Age = omit.From(random[int32](nil))
	}
	if m.Right.IsUnset() {
		m.Right = omit.From(random[bool](nil))
	}
	if m.Counter.IsUnset() {
		m.Counter = omit.From(random[int64](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Model
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ModelTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Model) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a model and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ModelTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Model, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a model and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ModelTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Model {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a model and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ModelTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Model {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a model and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ModelTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Model, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableModel(opt)

	m, err := models.Models.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = modelCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple models and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ModelTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ModelSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple models and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ModelTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ModelSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple models and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ModelTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ModelSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple models and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ModelTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ModelSlice, error) {
	var err error
	m := make(models.ModelSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Model has methods that act as mods for the ModelTemplate
var ModelMods modelMods

type modelMods struct{}

func (m modelMods) RandomizeAllColumns(f *faker.Faker) ModelMod {
	return ModelModSlice{
		ModelMods.RandomID(f),
		ModelMods.RandomName(f),
		ModelMods.RandomTitle(f),
		ModelMods.RandomFax(f),
		ModelMods.RandomWeb(f),
		ModelMods.RandomAge(f),
		ModelMods.RandomRight(f),
		ModelMods.RandomCounter(f),
	}
}

// Set the model columns to this value
func (m modelMods) ID(val int32) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m modelMods) IDFunc(f func() int32) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetID() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomID(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

func (m modelMods) ensureID(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m modelMods) Name(val string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m modelMods) NameFunc(f func() string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetName() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomName(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m modelMods) ensureName(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m modelMods) Title(val string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Title = func() string { return val }
	})
}

// Set the Column from the function
func (m modelMods) TitleFunc(f func() string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Title = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetTitle() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Title = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomTitle(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Title = func() string {
			return random[string](f)
		}
	})
}

func (m modelMods) ensureTitle(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.Title != nil {
			return
		}

		o.Title = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m modelMods) Fax(val string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Fax = func() string { return val }
	})
}

// Set the Column from the function
func (m modelMods) FaxFunc(f func() string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Fax = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetFax() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Fax = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomFax(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Fax = func() string {
			return random[string](f)
		}
	})
}

func (m modelMods) ensureFax(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.Fax != nil {
			return
		}

		o.Fax = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m modelMods) Web(val string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Web = func() string { return val }
	})
}

// Set the Column from the function
func (m modelMods) WebFunc(f func() string) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Web = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetWeb() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Web = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomWeb(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Web = func() string {
			return random[string](f)
		}
	})
}

func (m modelMods) ensureWeb(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.Web != nil {
			return
		}

		o.Web = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m modelMods) Age(val int32) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Age = func() int32 { return val }
	})
}

// Set the Column from the function
func (m modelMods) AgeFunc(f func() int32) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Age = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetAge() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Age = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomAge(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Age = func() int32 {
			return random[int32](f)
		}
	})
}

func (m modelMods) ensureAge(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.Age != nil {
			return
		}

		o.Age = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m modelMods) Right(val bool) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Right = func() bool { return val }
	})
}

// Set the Column from the function
func (m modelMods) RightFunc(f func() bool) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Right = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetRight() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Right = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomRight(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Right = func() bool {
			return random[bool](f)
		}
	})
}

func (m modelMods) ensureRight(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.Right != nil {
			return
		}

		o.Right = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m modelMods) Counter(val int64) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Counter = func() int64 { return val }
	})
}

// Set the Column from the function
func (m modelMods) CounterFunc(f func() int64) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Counter = f
	})
}

// Clear any values for the column
func (m modelMods) UnsetCounter() ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Counter = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m modelMods) RandomCounter(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		o.Counter = func() int64 {
			return random[int64](f)
		}
	})
}

func (m modelMods) ensureCounter(f *faker.Faker) ModelMod {
	return ModelModFunc(func(o *ModelTemplate) {
		if o.Counter != nil {
			return
		}

		o.Counter = func() int64 {
			return random[int64](f)
		}
	})
}
